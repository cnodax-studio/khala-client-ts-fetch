"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Khalad API
 * This is open source Khala server implementation.
 *
 * The version of the OpenAPI document: 0.1.0-alpha.1
 * Contact: info@cnodax.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class FileApi extends runtime.BaseAPI {
    /**
     * Upload file to specific chat
     */
    apiV1ChatsChatIdFilesPutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.chatId === null || requestParameters.chatId === undefined) {
                throw new runtime.RequiredError('chatId', 'Required parameter requestParameters.chatId was null or undefined when calling apiV1ChatsChatIdFilesPut.');
            }
            if (requestParameters.mime === null || requestParameters.mime === undefined) {
                throw new runtime.RequiredError('mime', 'Required parameter requestParameters.mime was null or undefined when calling apiV1ChatsChatIdFilesPut.');
            }
            if (requestParameters.file === null || requestParameters.file === undefined) {
                throw new runtime.RequiredError('file', 'Required parameter requestParameters.file was null or undefined when calling apiV1ChatsChatIdFilesPut.');
            }
            const queryParameters = {};
            if (requestParameters.mime !== undefined) {
                queryParameters['mime'] = requestParameters.mime;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/api/v1/chats/{chat_id}/files`.replace(`{${"chat_id"}}`, encodeURIComponent(String(requestParameters.chatId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.file,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ApiV1ChatsChatIdFilesPut200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Upload file to specific chat
     */
    apiV1ChatsChatIdFilesPut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.apiV1ChatsChatIdFilesPutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Download chat file
     */
    apiV1FilesPrivateChatIdFileIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.chatId === null || requestParameters.chatId === undefined) {
                throw new runtime.RequiredError('chatId', 'Required parameter requestParameters.chatId was null or undefined when calling apiV1FilesPrivateChatIdFileIdGet.');
            }
            if (requestParameters.fileId === null || requestParameters.fileId === undefined) {
                throw new runtime.RequiredError('fileId', 'Required parameter requestParameters.fileId was null or undefined when calling apiV1FilesPrivateChatIdFileIdGet.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/api/v1/files/private/{chat_id}/{file_id}`.replace(`{${"chat_id"}}`, encodeURIComponent(String(requestParameters.chatId))).replace(`{${"file_id"}}`, encodeURIComponent(String(requestParameters.fileId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Download chat file
     */
    apiV1FilesPrivateChatIdFileIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.apiV1FilesPrivateChatIdFileIdGetRaw(requestParameters, initOverrides);
        });
    }
}
exports.FileApi = FileApi;
