/* tslint:disable */
/* eslint-disable */
/**
 * Khalad API
 * This is open source Khala server implementation.
 *
 * The version of the OpenAPI document: 0.1.0-alpha.1
 * Contact: info@cnodax.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiV1ChatsChatIdInvitePost200Response,
  ApiV1OtsCodeGet200Response,
  ApiV1PushWebSubscribePostRequest,
  Get404Response,
} from '../models/index';
import {
    ApiV1ChatsChatIdInvitePost200ResponseFromJSON,
    ApiV1ChatsChatIdInvitePost200ResponseToJSON,
    ApiV1OtsCodeGet200ResponseFromJSON,
    ApiV1OtsCodeGet200ResponseToJSON,
    ApiV1PushWebSubscribePostRequestFromJSON,
    ApiV1PushWebSubscribePostRequestToJSON,
    Get404ResponseFromJSON,
    Get404ResponseToJSON,
} from '../models/index';

export interface ApiV1PushWebIdDeleteRequest {
    id: string;
}

export interface ApiV1PushWebSubscribePostOperationRequest {
    payload: ApiV1PushWebSubscribePostRequest;
}

/**
 * 
 */
export class PushApi extends runtime.BaseAPI {

    /**
     * Delete Web Push Subscription
     */
    async apiV1PushWebIdDeleteRaw(requestParameters: ApiV1PushWebIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1ChatsChatIdInvitePost200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1PushWebIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/push/web/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1ChatsChatIdInvitePost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete Web Push Subscription
     */
    async apiV1PushWebIdDelete(requestParameters: ApiV1PushWebIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1ChatsChatIdInvitePost200Response> {
        const response = await this.apiV1PushWebIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve VAPID public key for PUSH notification
     */
    async apiV1PushWebServerPublicKeyGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1OtsCodeGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/push/web/server/public-key`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1OtsCodeGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve VAPID public key for PUSH notification
     */
    async apiV1PushWebServerPublicKeyGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1OtsCodeGet200Response> {
        const response = await this.apiV1PushWebServerPublicKeyGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Subscribe to web PUSH notifications
     */
    async apiV1PushWebSubscribePostRaw(requestParameters: ApiV1PushWebSubscribePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1ChatsChatIdInvitePost200Response>> {
        if (requestParameters.payload === null || requestParameters.payload === undefined) {
            throw new runtime.RequiredError('payload','Required parameter requestParameters.payload was null or undefined when calling apiV1PushWebSubscribePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/push/web/subscribe`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV1PushWebSubscribePostRequestToJSON(requestParameters.payload),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1ChatsChatIdInvitePost200ResponseFromJSON(jsonValue));
    }

    /**
     * Subscribe to web PUSH notifications
     */
    async apiV1PushWebSubscribePost(requestParameters: ApiV1PushWebSubscribePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1ChatsChatIdInvitePost200Response> {
        const response = await this.apiV1PushWebSubscribePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Test Web Push Subscriptions
     */
    async apiV1PushWebTestPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1ChatsChatIdInvitePost200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/push/web/test`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1ChatsChatIdInvitePost200ResponseFromJSON(jsonValue));
    }

    /**
     * Test Web Push Subscriptions
     */
    async apiV1PushWebTestPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1ChatsChatIdInvitePost200Response> {
        const response = await this.apiV1PushWebTestPostRaw(initOverrides);
        return await response.value();
    }

}
