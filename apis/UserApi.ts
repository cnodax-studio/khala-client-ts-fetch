/* tslint:disable */
/* eslint-disable */
/**
 * Khalad API
 * This is open source Khala server implementation.
 *
 * The version of the OpenAPI document: 0.1.0-alpha.1
 * Contact: info@cnodax.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiV1ChatsChatIdInvitePost200Response,
  ApiV1SessionsCurrentGet200Response,
  ApiV1SessionsGet200Response,
  Get404Response,
} from '../models';
import {
    ApiV1ChatsChatIdInvitePost200ResponseFromJSON,
    ApiV1ChatsChatIdInvitePost200ResponseToJSON,
    ApiV1SessionsCurrentGet200ResponseFromJSON,
    ApiV1SessionsCurrentGet200ResponseToJSON,
    ApiV1SessionsGet200ResponseFromJSON,
    ApiV1SessionsGet200ResponseToJSON,
    Get404ResponseFromJSON,
    Get404ResponseToJSON,
} from '../models';

export interface ApiV1SessionsSessionIdRevokePostRequest {
    sessionId: string;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * Get current session of user
     */
    async apiV1SessionsCurrentGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1SessionsCurrentGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/sessions/current`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1SessionsCurrentGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get current session of user
     */
    async apiV1SessionsCurrentGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1SessionsCurrentGet200Response> {
        const response = await this.apiV1SessionsCurrentGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List active user sessions
     */
    async apiV1SessionsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1SessionsGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/sessions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1SessionsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * List active user sessions
     */
    async apiV1SessionsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1SessionsGet200Response> {
        const response = await this.apiV1SessionsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Logout specific session
     */
    async apiV1SessionsSessionIdRevokePostRaw(requestParameters: ApiV1SessionsSessionIdRevokePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1ChatsChatIdInvitePost200Response>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling apiV1SessionsSessionIdRevokePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/sessions/{session_id}/revoke`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1ChatsChatIdInvitePost200ResponseFromJSON(jsonValue));
    }

    /**
     * Logout specific session
     */
    async apiV1SessionsSessionIdRevokePost(requestParameters: ApiV1SessionsSessionIdRevokePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1ChatsChatIdInvitePost200Response> {
        const response = await this.apiV1SessionsSessionIdRevokePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
