/* tslint:disable */
/* eslint-disable */
/**
 * Khalad API
 * This is open source Khala server implementation.
 *
 * The version of the OpenAPI document: 0.1.0-alpha.1
 * Contact: info@cnodax.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiV1OtsCodeGet200Response,
  ApiV1OtsPost200Response,
  ApiV1OtsPostRequest,
  Get404Response,
} from '../models/index';
import {
    ApiV1OtsCodeGet200ResponseFromJSON,
    ApiV1OtsCodeGet200ResponseToJSON,
    ApiV1OtsPost200ResponseFromJSON,
    ApiV1OtsPost200ResponseToJSON,
    ApiV1OtsPostRequestFromJSON,
    ApiV1OtsPostRequestToJSON,
    Get404ResponseFromJSON,
    Get404ResponseToJSON,
} from '../models/index';

export interface ApiV1OtsCodeGetRequest {
    code: string;
}

export interface ApiV1OtsPostOperationRequest {
    payload: ApiV1OtsPostRequest;
}

/**
 * 
 */
export class OtsApi extends runtime.BaseAPI {

    /**
     * Get One-Time-Storage data
     */
    async apiV1OtsCodeGetRaw(requestParameters: ApiV1OtsCodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1OtsCodeGet200Response>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling apiV1OtsCodeGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/ots/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1OtsCodeGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get One-Time-Storage data
     */
    async apiV1OtsCodeGet(requestParameters: ApiV1OtsCodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1OtsCodeGet200Response> {
        const response = await this.apiV1OtsCodeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create One-Time-Storage
     */
    async apiV1OtsPostRaw(requestParameters: ApiV1OtsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1OtsPost200Response>> {
        if (requestParameters.payload === null || requestParameters.payload === undefined) {
            throw new runtime.RequiredError('payload','Required parameter requestParameters.payload was null or undefined when calling apiV1OtsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/ots`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV1OtsPostRequestToJSON(requestParameters.payload),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1OtsPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create One-Time-Storage
     */
    async apiV1OtsPost(requestParameters: ApiV1OtsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1OtsPost200Response> {
        const response = await this.apiV1OtsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
