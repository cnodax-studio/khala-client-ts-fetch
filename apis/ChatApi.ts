/* tslint:disable */
/* eslint-disable */
/**
 * Khalad API
 * This is open source Khala server implementation.
 *
 * The version of the OpenAPI document: 0.1.0-alpha.1
 * Contact: info@cnodax.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiV1ChatsChatIdInvitePost200Response,
  ApiV1ChatsChatIdInvitePostRequest,
  ApiV1ChatsGet200Response,
  ApiV1ChatsPost200Response,
  ApiV1ChatsPostRequest,
  Get404Response,
} from '../models/index';
import {
    ApiV1ChatsChatIdInvitePost200ResponseFromJSON,
    ApiV1ChatsChatIdInvitePost200ResponseToJSON,
    ApiV1ChatsChatIdInvitePostRequestFromJSON,
    ApiV1ChatsChatIdInvitePostRequestToJSON,
    ApiV1ChatsGet200ResponseFromJSON,
    ApiV1ChatsGet200ResponseToJSON,
    ApiV1ChatsPost200ResponseFromJSON,
    ApiV1ChatsPost200ResponseToJSON,
    ApiV1ChatsPostRequestFromJSON,
    ApiV1ChatsPostRequestToJSON,
    Get404ResponseFromJSON,
    Get404ResponseToJSON,
} from '../models/index';

export interface ApiV1ChatsChatIdGetRequest {
    chatId: string;
}

export interface ApiV1ChatsChatIdInvitePostOperationRequest {
    chatId: string;
    payload: ApiV1ChatsChatIdInvitePostRequest;
}

export interface ApiV1ChatsPostOperationRequest {
    payload: ApiV1ChatsPostRequest;
}

/**
 * 
 */
export class ChatApi extends runtime.BaseAPI {

    /**
     * Get specific existing chat where user is member
     */
    async apiV1ChatsChatIdGetRaw(requestParameters: ApiV1ChatsChatIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1ChatsPost200Response>> {
        if (requestParameters.chatId === null || requestParameters.chatId === undefined) {
            throw new runtime.RequiredError('chatId','Required parameter requestParameters.chatId was null or undefined when calling apiV1ChatsChatIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/chats/{chat_id}`.replace(`{${"chat_id"}}`, encodeURIComponent(String(requestParameters.chatId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1ChatsPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Get specific existing chat where user is member
     */
    async apiV1ChatsChatIdGet(requestParameters: ApiV1ChatsChatIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1ChatsPost200Response> {
        const response = await this.apiV1ChatsChatIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Invite user in specific chat
     */
    async apiV1ChatsChatIdInvitePostRaw(requestParameters: ApiV1ChatsChatIdInvitePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1ChatsChatIdInvitePost200Response>> {
        if (requestParameters.chatId === null || requestParameters.chatId === undefined) {
            throw new runtime.RequiredError('chatId','Required parameter requestParameters.chatId was null or undefined when calling apiV1ChatsChatIdInvitePost.');
        }

        if (requestParameters.payload === null || requestParameters.payload === undefined) {
            throw new runtime.RequiredError('payload','Required parameter requestParameters.payload was null or undefined when calling apiV1ChatsChatIdInvitePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/chats/{chat_id}/invite`.replace(`{${"chat_id"}}`, encodeURIComponent(String(requestParameters.chatId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV1ChatsChatIdInvitePostRequestToJSON(requestParameters.payload),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1ChatsChatIdInvitePost200ResponseFromJSON(jsonValue));
    }

    /**
     * Invite user in specific chat
     */
    async apiV1ChatsChatIdInvitePost(requestParameters: ApiV1ChatsChatIdInvitePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1ChatsChatIdInvitePost200Response> {
        const response = await this.apiV1ChatsChatIdInvitePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List existing chat where user is member
     */
    async apiV1ChatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1ChatsGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/chats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1ChatsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * List existing chat where user is member
     */
    async apiV1ChatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1ChatsGet200Response> {
        const response = await this.apiV1ChatsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create new chat
     */
    async apiV1ChatsPostRaw(requestParameters: ApiV1ChatsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1ChatsPost200Response>> {
        if (requestParameters.payload === null || requestParameters.payload === undefined) {
            throw new runtime.RequiredError('payload','Required parameter requestParameters.payload was null or undefined when calling apiV1ChatsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/api/v1/chats`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV1ChatsPostRequestToJSON(requestParameters.payload),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1ChatsPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create new chat
     */
    async apiV1ChatsPost(requestParameters: ApiV1ChatsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1ChatsPost200Response> {
        const response = await this.apiV1ChatsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
